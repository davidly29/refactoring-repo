Index: src/AdminPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/AdminPage.java	(date 1583599411986)
+++ src/AdminPage.java	(date 1583599411986)
@@ -0,0 +1,1018 @@
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.util.ArrayList;
+
+
+public class AdminPage {
+    private int position = 0;
+
+
+
+    JFrame mainFrame, secondaryFrame;
+    JLabel firstNameLabel, surnameLabel, pPPSLabel, dOBLabel, customerIDLabel, passwordLabel;
+    JTextField firstNameTextField, surnameTextField, pPSTextField, dOBTextField, customerIDTextField, passwordTextField;
+
+    JButton add;
+    String 	PPS,firstName,surname,DOB,CustomerID;
+    JPanel panel2,  deleteCustomerPanel, deleteAccountPanel, bankChargesPanel, interestPanel, editCustomerPanel, navigatePanel, summaryPanel, accountPanel, returnPanel;
+    JButton deleteCustomer, deleteAccount, bankChargesButton, interestButton, editCustomerButton, navigateButton, summaryButton, accountButton, returnButton;
+    Menu menu = new Menu();
+    private String password;
+    Container content;
+    private Customer customer = null;
+    private CustomerAccount acc = new CustomerAccount();
+
+    public void adminMenu(ArrayList<Customer> customerList){
+        mainFrame = new JFrame("Administrator Menu");
+        mainFrame.setSize(400, 400);
+        mainFrame.setLocation(200, 200);
+        mainFrame.addWindowListener(new WindowAdapter() {
+            public void windowClosing(WindowEvent we) { System.exit(0); }
+        });
+        mainFrame.setVisible(true);
+
+        deleteCustomerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        deleteCustomer = new JButton("Delete Customer");
+        deleteCustomer.setPreferredSize(new Dimension(250, 20));
+        deleteCustomerPanel.add(deleteCustomer);
+
+        deleteAccountPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        deleteAccount = new JButton("Delete Account");
+        deleteAccount.setPreferredSize(new Dimension(250, 20));
+        deleteAccountPanel.add(deleteAccount);
+
+        bankChargesPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        bankChargesButton = new JButton("Apply Bank Charges");
+        bankChargesButton.setPreferredSize(new Dimension(250, 20));
+        bankChargesPanel.add(bankChargesButton);
+
+        interestPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        interestButton = new JButton("Apply Interest");
+        interestPanel.add(interestButton);
+        interestButton.setPreferredSize(new Dimension(250, 20));
+
+        editCustomerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        editCustomerButton = new JButton("Edit existing Customer");
+        editCustomerPanel.add(editCustomerButton);
+        editCustomerButton.setPreferredSize(new Dimension(250, 20));
+
+        navigatePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        navigateButton = new JButton("Navigate Customer Collection");
+        navigatePanel.add(navigateButton);
+        navigateButton.setPreferredSize(new Dimension(250, 20));
+
+        summaryPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        summaryButton = new JButton("Display Summary Of All Accounts");
+        summaryPanel.add(summaryButton);
+        summaryButton.setPreferredSize(new Dimension(250, 20));
+
+        accountPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        accountButton = new JButton("Add an Account to a Customer");
+        accountPanel.add(accountButton);
+        accountButton.setPreferredSize(new Dimension(250, 20));
+
+        returnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
+        returnButton = new JButton("Exit Admin Menu");
+        returnPanel.add(returnButton);
+
+        JLabel label1 = new JLabel("Please select an option");
+
+        content = mainFrame.getContentPane();
+        content.setLayout(new GridLayout(9, 1));
+        content.add(label1);
+        content.add(accountPanel);
+        content.add(bankChargesPanel);
+        content.add(interestPanel);
+        content.add(editCustomerPanel);
+        content.add(navigatePanel);
+        content.add(summaryPanel);
+        content.add(deleteCustomerPanel);
+        //	content.add(deleteAccountPanel);
+        content.add(returnPanel);
+
+        bankChargesButton.addActionListener(new ActionListener(  ) {
+            public void actionPerformed(ActionEvent ae) {
+
+                boolean loop = true;
+
+                boolean found = false;
+
+                if(customerList.isEmpty())
+                {
+                    JOptionPane.showMessageDialog(mainFrame, "There are no customers yet!"  ,"Oops!",  JOptionPane.INFORMATION_MESSAGE);
+                    mainFrame.dispose();
+                    adminMenu(customerList);
+
+                }
+                else
+                {
+                    while(loop)
+                    {
+                        Object customerID = JOptionPane.showInputDialog(mainFrame, "Customer ID of Customer You Wish to Apply Charges to:");
+
+                        for (Customer aCustomer: customerList){
+
+                            if(aCustomer.getCustomerID().equals(customerID))
+                            {
+                                found = true;
+                                customer = aCustomer;
+                                loop = false;
+                            }
+                        }
+
+                        if(!found)
+                        {
+                            int reply  = JOptionPane.showConfirmDialog(null, null, "User not found. Try again?", JOptionPane.YES_NO_OPTION);
+                            if (reply == JOptionPane.YES_OPTION) {
+                                loop = true;
+                            }
+                            else if(reply == JOptionPane.NO_OPTION)
+                            {
+                                mainFrame.dispose();
+                                loop = false;
+
+                                adminMenu(customerList);
+                            }
+                        }
+                        else
+                        {
+                            mainFrame.dispose();
+                            mainFrame = new JFrame("Administrator Menu");
+                            mainFrame.setSize(400, 300);
+                            mainFrame.setLocation(200, 200);
+                            mainFrame.addWindowListener(new WindowAdapter() {
+                                public void windowClosing(WindowEvent we) { System.exit(0); }
+                            });
+                            mainFrame.setVisible(true);
+
+
+                            JComboBox<String> box = new JComboBox<String>();
+                            for (int i =0; i < customer.getAccounts().size(); i++)
+                            {
+
+
+                                box.addItem(customer.getAccounts().get(i).getNumber());
+                            }
+
+
+                            box.getSelectedItem();
+
+                            JPanel boxPanel = new JPanel();
+                            boxPanel.add(box);
+
+                            JPanel buttonPanel = new JPanel();
+                            JButton continueButton = new JButton("Apply Charge");
+                            JButton returnButton = new JButton("Return");
+                            buttonPanel.add(continueButton);
+                            buttonPanel.add(returnButton);
+                            Container content = mainFrame.getContentPane();
+                            content.setLayout(new GridLayout(2, 1));
+
+                            content.add(boxPanel);
+                            content.add(buttonPanel);
+
+
+                            if(customer.getAccounts().isEmpty())
+                            {
+                                JOptionPane.showMessageDialog(mainFrame, "This customer has no accounts! \n The admin must add acounts to this customer."   ,"Oops!",  JOptionPane.INFORMATION_MESSAGE);
+                                mainFrame.dispose();
+                                adminMenu(customerList);
+                            }
+                            else
+                            {
+
+                                for(int i = 0; i < customer.getAccounts().size(); i++)
+                                {
+                                    if(customer.getAccounts().get(i).getNumber() == box.getSelectedItem() )
+                                    {
+                                        acc = customer.getAccounts().get(i);
+                                    }
+                                }
+
+                                continueButton.addActionListener(new ActionListener(  ) {
+                                    public void actionPerformed(ActionEvent ae) {
+                                        String euro = "\u20ac";
+
+
+                                        if(acc instanceof CustomerDepositAccount)
+                                        {
+
+
+                                            JOptionPane.showMessageDialog(mainFrame, "25" + euro + " deposit account fee aplied."  ,"",  JOptionPane.INFORMATION_MESSAGE);
+                                            acc.setBalance(acc.getBalance()-25);
+                                            JOptionPane.showMessageDialog(mainFrame, "New balance = " + acc.getBalance() ,"Success!",  JOptionPane.INFORMATION_MESSAGE);
+                                        }
+
+                                        if(acc instanceof CustomerCurrentAccount)
+                                        {
+
+
+                                            JOptionPane.showMessageDialog(mainFrame, "15" + euro + " current account fee aplied."  ,"",  JOptionPane.INFORMATION_MESSAGE);
+                                            acc.setBalance(acc.getBalance()-25);
+                                            JOptionPane.showMessageDialog(mainFrame, "New balance = " + acc.getBalance() ,"Success!",  JOptionPane.INFORMATION_MESSAGE);
+                                        }
+
+
+                                        mainFrame.dispose();
+                                        adminMenu(customerList);
+                                    }
+                                });
+
+                                returnButton.addActionListener(new ActionListener(  ) {
+                                    public void actionPerformed(ActionEvent ae) {
+                                        mainFrame.dispose();
+                                        // menuStart();
+                                    }
+                                });
+
+                            }
+                        }
+                    }
+                }
+
+
+
+            }
+        });
+        ///////////////////////////////////////////////////////////////////////
+        interestButton.addActionListener(new ActionListener(  ) {
+            public void actionPerformed(ActionEvent ae) {
+
+                boolean loop = true;
+
+                boolean found = false;
+
+                if(customerList.isEmpty())
+                {
+                    JOptionPane.showMessageDialog(mainFrame, "There are no customers yet!"  ,"Oops!",  JOptionPane.INFORMATION_MESSAGE);
+                    mainFrame.dispose();
+                    adminMenu(customerList);
+
+                }
+                else
+                {
+                    while(loop)
+                    {
+                        Object customerID = JOptionPane.showInputDialog(mainFrame, "Customer ID of Customer You Wish to Apply Interest to:");
+
+                        for (Customer aCustomer: customerList){
+
+                            if(aCustomer.getCustomerID().equals(customerID))
+                            {
+                                found = true;
+                                customer = aCustomer;
+                                loop = false;
+                            }
+                        }
+
+                        if(found == false)
+                        {
+                            int reply  = JOptionPane.showConfirmDialog(null, null, "User not found. Try again?", JOptionPane.YES_NO_OPTION);
+                            if (reply == JOptionPane.YES_OPTION) {
+                                loop = true;
+                            }
+                            else if(reply == JOptionPane.NO_OPTION)
+                            {
+                                mainFrame.dispose();
+                                loop = false;
+
+                                adminMenu(customerList);
+                            }
+                        }
+                        else
+                        {
+                            mainFrame.dispose();
+                            mainFrame = new JFrame("Administrator Menu");
+                            mainFrame.setSize(400, 300);
+                            mainFrame.setLocation(200, 200);
+                            mainFrame.addWindowListener(new WindowAdapter() {
+                                public void windowClosing(WindowEvent we) { System.exit(0); }
+                            });
+                            mainFrame.setVisible(true);
+
+
+                            JComboBox<String> box = new JComboBox<String>();
+                            for (int i =0; i < customer.getAccounts().size(); i++)
+                            {
+
+
+                                box.addItem(customer.getAccounts().get(i).getNumber());
+                            }
+
+
+                            box.getSelectedItem();
+
+                            JPanel boxPanel = new JPanel();
+
+                            JLabel label = new JLabel("Select an account to apply interest to:");
+                            boxPanel.add(label);
+                            boxPanel.add(box);
+                            JPanel buttonPanel = new JPanel();
+                            JButton continueButton = new JButton("Apply Interest");
+                            JButton returnButton = new JButton("Return");
+                            buttonPanel.add(continueButton);
+                            buttonPanel.add(returnButton);
+                            Container content = mainFrame.getContentPane();
+                            content.setLayout(new GridLayout(2, 1));
+
+                            content.add(boxPanel);
+                            content.add(buttonPanel);
+
+
+                            if(customer.getAccounts().isEmpty())
+                            {
+                                JOptionPane.showMessageDialog(mainFrame, "This customer has no accounts! \n The admin must add acounts to this customer."   ,"Oops!",  JOptionPane.INFORMATION_MESSAGE);
+                                mainFrame.dispose();
+                                adminMenu(customerList);
+                            }
+                            else
+                            {
+
+                                for(int i = 0; i < customer.getAccounts().size(); i++)
+                                {
+                                    if(customer.getAccounts().get(i).getNumber() == box.getSelectedItem() )
+                                    {
+                                        acc = customer.getAccounts().get(i);
+                                    }
+                                }
+
+                                continueButton.addActionListener(new ActionListener(  ) {
+                                    public void actionPerformed(ActionEvent ae) {
+                                        String euro = "\u20ac";
+                                        double interest = 0;
+                                        boolean loop = true;
+
+                                        while(loop)
+                                        {
+                                            String interestString = JOptionPane.showInputDialog(mainFrame, "Enter interest percentage you wish to apply: \n NOTE: Please enter a numerical value. (with no percentage sign) \n E.g: If you wish to apply 8% interest, enter '8'");//the isNumeric method tests to see if the string entered was numeric.
+                                            if(Menu.isNumeric(interestString))
+                                            {
+
+                                                interest = Double.parseDouble(interestString);
+                                                loop = false;
+
+                                                acc.setBalance(acc.getBalance() + (acc.getBalance() * (interest/100)));
+
+                                                JOptionPane.showMessageDialog(mainFrame, interest + "% interest applied. \n new balance = " + acc.getBalance() + euro ,"Success!",  JOptionPane.INFORMATION_MESSAGE);
+                                            }
+
+
+                                            else
+                                            {
+                                                JOptionPane.showMessageDialog(mainFrame, "You must enter a numerical value!" ,"Oops!",  JOptionPane.INFORMATION_MESSAGE);
+                                            }
+
+
+                                        }
+
+                                        mainFrame.dispose();
+                                        adminMenu(customerList);
+                                    }
+                                });
+
+                                returnButton.addActionListener(new ActionListener(  ) {
+                                    public void actionPerformed(ActionEvent ae) {
+                                        mainFrame.dispose();
+                                        //menuStart();
+                                    }
+                                });
+
+                            }
+                        }
+                    }
+                }
+
+            }
+        });
+        //////////////////////////////////////////////////////////////////////////
+        editCustomerButton.addActionListener(new ActionListener(  ) {
+            public void actionPerformed(ActionEvent ae) {
+
+                boolean loop = true;
+
+                boolean found = false;
+
+                if(customerList.isEmpty())
+                {
+                    JOptionPane.showMessageDialog(mainFrame, "There are no customers yet!"  ,"Oops!",  JOptionPane.INFORMATION_MESSAGE);
+                    mainFrame.dispose();
+                    adminMenu(customerList);
+
+                }
+                else
+                {
+
+                    while(loop)
+                    {
+                        Object customerID = JOptionPane.showInputDialog(mainFrame, "Enter Customer ID:");
+
+                        for (Customer aCustomer: customerList){
+
+                            if(aCustomer.getCustomerID().equals(customerID))
+                            {
+                                found = true;
+                                customer = aCustomer;
+                            }
+                        }
+
+                        if(found == false)
+                        {
+                            int reply  = JOptionPane.showConfirmDialog(null, null, "User not found. Try again?", JOptionPane.YES_NO_OPTION);
+                            if (reply == JOptionPane.YES_OPTION) {
+                                loop = true;
+                            }
+                            else if(reply == JOptionPane.NO_OPTION)
+                            {
+                                mainFrame.dispose();
+                                loop = false;
+
+                                adminMenu(customerList);
+                            }
+                        }
+                        else
+                        {
+                            loop = false;
+                        }
+
+                    }
+
+                    mainFrame.dispose();
+
+                    mainFrame.dispose();
+                    mainFrame = new JFrame("Administrator Menu");
+                    mainFrame.setSize(400, 300);
+                    mainFrame.setLocation(200, 200);
+                    mainFrame.addWindowListener(new WindowAdapter() {
+                        public void windowClosing(WindowEvent we) { System.exit(0); }
+                    });
+
+                    firstNameLabel = new JLabel("First Name:", SwingConstants.LEFT);
+                    surnameLabel = new JLabel("Surname:", SwingConstants.LEFT);
+                    pPPSLabel = new JLabel("PPS Number:", SwingConstants.LEFT);
+                    dOBLabel = new JLabel("Date of birth", SwingConstants.LEFT);
+                    customerIDLabel = new JLabel("CustomerID:", SwingConstants.LEFT);
+                    passwordLabel = new JLabel("Password:", SwingConstants.LEFT);
+                    firstNameTextField = new JTextField(20);
+                    surnameTextField = new JTextField(20);
+                    pPSTextField = new JTextField(20);
+                    dOBTextField = new JTextField(20);
+                    customerIDTextField = new JTextField(20);
+                    passwordTextField = new JTextField(20);
+
+                    JPanel textPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+
+                    JPanel cancelPanel = new JPanel();
+
+                    textPanel.add(firstNameLabel);
+                    textPanel.add(firstNameTextField);
+                    textPanel.add(surnameLabel);
+                    textPanel.add(surnameTextField);
+                    textPanel.add(pPPSLabel);
+                    textPanel.add(pPSTextField);
+                    textPanel.add(dOBLabel);
+                    textPanel.add(dOBTextField);
+                    textPanel.add(customerIDLabel);
+                    textPanel.add(customerIDTextField);
+                    textPanel.add(passwordLabel);
+                    textPanel.add(passwordTextField);
+
+                    firstNameTextField.setText(customer.getFirstName());
+                    surnameTextField.setText(customer.getSurname());
+                    pPSTextField.setText(customer.getPPS());
+                    dOBTextField.setText(customer.getDOB());
+                    customerIDTextField.setText(customer.getCustomerID());
+                    passwordTextField.setText(customer.getPassword());
+
+                    //JLabel label1 = new JLabel("Edit customer details below. The save");
+
+
+                    JButton saveButton = new JButton("Save");
+                    JButton cancelButton = new JButton("Exit");
+
+                    cancelPanel.add(cancelButton, BorderLayout.SOUTH);
+                    cancelPanel.add(saveButton, BorderLayout.SOUTH);
+                    //	content.removeAll();
+                    Container content = mainFrame.getContentPane();
+                    content.setLayout(new GridLayout(2, 1));
+                    content.add(textPanel, BorderLayout.NORTH);
+                    content.add(cancelPanel, BorderLayout.SOUTH);
+
+                    mainFrame.setContentPane(content);
+                    mainFrame.setSize(340, 350);
+                    mainFrame.setLocation(200, 200);
+                    mainFrame.setVisible(true);
+                    mainFrame.setResizable(false);
+
+                    saveButton.addActionListener(new ActionListener(  ) {
+                        public void actionPerformed(ActionEvent ae) {
+
+                            customer.setFirstName(firstNameTextField.getText());
+                            customer.setSurname(surnameTextField.getText());
+                            customer.setPPS(pPSTextField.getText());
+                            customer.setDOB(dOBTextField.getText());
+                            customer.setCustomerID(customerIDTextField.getText());
+                            customer.setPassword(passwordTextField.getText());
+
+                            JOptionPane.showMessageDialog(null, "Changes Saved.");
+                        }
+                    });
+
+                    cancelButton.addActionListener(new ActionListener(  ) {
+                        public void actionPerformed(ActionEvent ae) {
+                            mainFrame.dispose();
+
+                            adminMenu(customerList);
+                        }
+                    });
+                }}
+        });
+        /////////////////////////////////////////////////////////
+        summaryButton.addActionListener(new ActionListener(  ) {
+            public void actionPerformed(ActionEvent ae) {
+                mainFrame.dispose();
+
+
+                mainFrame = new JFrame("Summary of Transactions");
+                mainFrame.setSize(400, 700);
+                mainFrame.setLocation(200, 200);
+                mainFrame.addWindowListener(new WindowAdapter() {
+                    public void windowClosing(WindowEvent we) { System.exit(0); }
+                });
+                mainFrame.setVisible(true);
+
+                JLabel label1 = new JLabel("Summary of all transactions: ");
+
+                JPanel returnPanel = new JPanel();
+                JButton returnButton = new JButton("Return");
+                returnPanel.add(returnButton);
+
+                JPanel textPanel = new JPanel();
+
+                textPanel.setLayout( new BorderLayout() );
+                JTextArea textArea = new JTextArea(40, 20);
+                textArea.setEditable(false);
+                textPanel.add(label1, BorderLayout.NORTH);
+                textPanel.add(textArea, BorderLayout.CENTER);
+                textPanel.add(returnButton, BorderLayout.SOUTH);
+
+                JScrollPane scrollPane = new JScrollPane(textArea);
+                textPanel.add(scrollPane);
+
+                for (int a = 0; a < customerList.size(); a++)//For each customer, for each account, it displays each transaction.
+                {
+                    for (int b = 0; b < customerList.get(a).getAccounts().size(); b ++ )
+                    {
+                        acc = customerList.get(a).getAccounts().get(b);
+                        for (int c = 0; c < customerList.get(a).getAccounts().get(b).getTransactionList().size(); c++)
+                        {
+
+                            textArea.append(acc.getTransactionList().get(c).toString());
+                            //Int total = acc.getTransactionList().get(c).getAmount(); //I was going to use this to keep a running total but I couldnt get it  working.
+
+                        }
+                    }
+                }
+
+
+
+
+                textPanel.add(textArea);
+                content.removeAll();
+
+
+                Container content = mainFrame.getContentPane();
+                content.setLayout(new GridLayout(1, 1));
+                //	content.add(label1);
+                content.add(textPanel);
+                //content.add(returnPanel);
+
+                returnButton.addActionListener(new ActionListener(  ) {
+                    public void actionPerformed(ActionEvent ae) {
+                        mainFrame.dispose();
+                        adminMenu(customerList);
+                    }
+                });
+            }
+        });
+        ////////////////////////////////////////////////////////////////
+        navigateButton.addActionListener(new ActionListener(  ) {
+            public void actionPerformed(ActionEvent ae) {
+                mainFrame.dispose();
+
+                if(customerList.isEmpty())
+                {
+                    JOptionPane.showMessageDialog(null, "There are currently no customers to display. ");
+                    adminMenu(customerList);
+                }
+                else
+                {
+
+                    JButton first, previous, next, last, cancel;
+                    JPanel gridPanel, buttonPanel, cancelPanel;
+
+                   Container content = mainFrame.getContentPane();
+
+                    content.setLayout(new BorderLayout());
+
+                    buttonPanel = new JPanel();
+                    gridPanel = new JPanel(new GridLayout(8, 2));
+                    cancelPanel = new JPanel();
+
+                    firstNameLabel = new JLabel("First Name:", SwingConstants.LEFT);
+                    surnameLabel = new JLabel("Surname:", SwingConstants.LEFT);
+                    pPPSLabel = new JLabel("PPS Number:", SwingConstants.LEFT);
+                    dOBLabel = new JLabel("Date of birth", SwingConstants.LEFT);
+                    customerIDLabel = new JLabel("CustomerID:", SwingConstants.LEFT);
+                    passwordLabel = new JLabel("Password:", SwingConstants.LEFT);
+                    firstNameTextField = new JTextField(20);
+                    surnameTextField = new JTextField(20);
+                    pPSTextField = new JTextField(20);
+                    dOBTextField = new JTextField(20);
+                    customerIDTextField = new JTextField(20);
+                    passwordTextField = new JTextField(20);
+
+                    first = new JButton("First");
+                    previous = new JButton("Previous");
+                    next = new JButton("Next");
+                    last = new JButton("Last");
+                    cancel = new JButton("Cancel");
+
+                    firstNameTextField.setText(customerList.get(0).getFirstName());
+                    surnameTextField.setText(customerList.get(0).getSurname());
+                    pPSTextField.setText(customerList.get(0).getPPS());
+                    dOBTextField.setText(customerList.get(0).getDOB());
+                    customerIDTextField.setText(customerList.get(0).getCustomerID());
+                    passwordTextField.setText(customerList.get(0).getPassword());
+
+                    firstNameTextField.setEditable(false);
+                    surnameTextField.setEditable(false);
+                    pPSTextField.setEditable(false);
+                    dOBTextField.setEditable(false);
+                    customerIDTextField.setEditable(false);
+                    passwordTextField.setEditable(false);
+
+                    gridPanel.add(firstNameLabel);
+                    gridPanel.add(firstNameTextField);
+                    gridPanel.add(surnameLabel);
+                    gridPanel.add(surnameTextField);
+                    gridPanel.add(pPPSLabel);
+                    gridPanel.add(pPSTextField);
+                    gridPanel.add(dOBLabel);
+                    gridPanel.add(dOBTextField);
+                    gridPanel.add(customerIDLabel);
+                    gridPanel.add(customerIDTextField);
+                    gridPanel.add(passwordLabel);
+                    gridPanel.add(passwordTextField);
+
+                    buttonPanel.add(first);
+                    buttonPanel.add(previous);
+                    buttonPanel.add(next);
+                    buttonPanel.add(last);
+
+                    cancelPanel.add(cancel);
+
+                    content.add(gridPanel, BorderLayout.NORTH);
+                    content.add(buttonPanel, BorderLayout.CENTER);
+                    content.add(cancelPanel, BorderLayout.AFTER_LAST_LINE);
+                    first.addActionListener(new ActionListener(  ) {
+                        public void actionPerformed(ActionEvent ae) {
+                            position = 0;
+                            firstNameTextField.setText(customerList.get(0).getFirstName());
+                            surnameTextField.setText(customerList.get(0).getSurname());
+                            pPSTextField.setText(customerList.get(0).getPPS());
+                            dOBTextField.setText(customerList.get(0).getDOB());
+                            customerIDTextField.setText(customerList.get(0).getCustomerID());
+                            passwordTextField.setText(customerList.get(0).getPassword());
+                        }
+                    });
+
+                    previous.addActionListener(new ActionListener(  ) {
+                        public void actionPerformed(ActionEvent ae) {
+
+                            if(position < 1)
+                            {
+                                //don't do anything
+                            }
+                            else
+                            {
+                                position = position - 1;
+
+                                firstNameTextField.setText(customerList.get(position).getFirstName());
+                                surnameTextField.setText(customerList.get(position).getSurname());
+                                pPSTextField.setText(customerList.get(position).getPPS());
+                                dOBTextField.setText(customerList.get(position).getDOB());
+                                customerIDTextField.setText(customerList.get(position).getCustomerID());
+                                passwordTextField.setText(customerList.get(position).getPassword());
+                            }
+                        }
+                    });
+
+                    next.addActionListener(new ActionListener(  ) {
+                        public void actionPerformed(ActionEvent ae) {
+
+                            if(position == customerList.size()-1)
+                            {
+                                //don't do anything
+                            }
+                            else
+                            {
+                                position = position + 1;
+
+                                firstNameTextField.setText(customerList.get(position).getFirstName());
+                                surnameTextField.setText(customerList.get(position).getSurname());
+                                pPSTextField.setText(customerList.get(position).getPPS());
+                                dOBTextField.setText(customerList.get(position).getDOB());
+                                customerIDTextField.setText(customerList.get(position).getCustomerID());
+                                passwordTextField.setText(customerList.get(position).getPassword());
+                            }
+
+
+
+                        }
+                    });
+
+                    last.addActionListener(new ActionListener(  ) {
+                        public void actionPerformed(ActionEvent ae) {
+
+                            position = customerList.size() - 1;
+
+                            firstNameTextField.setText(customerList.get(position).getFirstName());
+                            surnameTextField.setText(customerList.get(position).getSurname());
+                            pPSTextField.setText(customerList.get(position).getPPS());
+                            dOBTextField.setText(customerList.get(position).getDOB());
+                            customerIDTextField.setText(customerList.get(position).getCustomerID());
+                            passwordTextField.setText(customerList.get(position).getPassword());
+                        }
+                    });
+
+                    cancel.addActionListener(new ActionListener(  ) {
+                        public void actionPerformed(ActionEvent ae) {
+                            mainFrame.dispose();
+                            menu.admin();
+                        }
+                    });
+                   mainFrame.setContentPane(content);
+                    mainFrame.setSize(400, 300);
+                    mainFrame.setVisible(true);
+                }
+            }
+        });
+        //////////////////////////////////////////////////////////////////
+        accountButton.addActionListener(new ActionListener(  ) {
+            public void actionPerformed(ActionEvent ae) {
+                mainFrame.dispose();
+
+                if(customerList.isEmpty())
+                {
+                    JOptionPane.showMessageDialog(mainFrame, "There are no customers yet!"  ,"Oops!",  JOptionPane.INFORMATION_MESSAGE);
+                    mainFrame.dispose();
+                    adminMenu(customerList);
+                }
+                else
+                {
+                    boolean loop = true;
+
+                    boolean found = false;
+
+                    while(loop)
+                    {
+                        Object customerID = JOptionPane.showInputDialog(mainFrame, "Customer ID of Customer You Wish to Add an Account to:");
+
+                        for (Customer aCustomer: customerList){
+
+                            if(aCustomer.getCustomerID().equals(customerID))
+                            {
+                                found = true;
+                                customer = aCustomer;
+                            }
+                        }
+
+                        if(found == false)
+                        {
+                            int reply  = JOptionPane.showConfirmDialog(null, null, "User not found. Try again?", JOptionPane.YES_NO_OPTION);
+                            if (reply == JOptionPane.YES_OPTION) {
+                                loop = true;
+                            }
+                            else if(reply == JOptionPane.NO_OPTION)
+                            {
+                                mainFrame.dispose();
+                                loop = false;
+
+                                adminMenu(customerList);
+                            }
+                        }
+                        else
+                        {
+                            loop = false;
+                            //a combo box in an dialog box that asks the admin what type of account they wish to create (deposit/current)
+                            String[] choices = { "Current Account", "Deposit Account" };
+                            String account = (String) JOptionPane.showInputDialog(null, "Please choose account type",
+                                    "Account Type", JOptionPane.QUESTION_MESSAGE, null, choices, choices[1]);
+
+                            if(account.equals("Current Account"))
+                            {
+                                //create current account
+                                boolean valid = true;
+                                double balance = 0;
+                                String number = String.valueOf("C" + (customerList.indexOf(customer)+1) * 10 + (customer.getAccounts().size()+1));//this simple algorithm generates the account number
+                                ArrayList<AccountTransaction> transactionList = new ArrayList<AccountTransaction>();
+                                int randomPIN = (int)(Math.random()*9000)+1000;
+                                String pin = String.valueOf(randomPIN);
+
+                                ATMCard atm = new ATMCard(randomPIN, valid);
+
+                                CustomerCurrentAccount current = new CustomerCurrentAccount(atm, number, balance, transactionList);
+
+                                customer.getAccounts().add(current);
+                                JOptionPane.showMessageDialog(mainFrame, "Account number = " + number +"\n PIN = " + pin  ,"Account created.",  JOptionPane.INFORMATION_MESSAGE);
+
+                                mainFrame.dispose();
+                                adminMenu(customerList);
+                            }
+
+                            if(account.equals("Deposit Account"))
+                            {
+                                //create deposit account
+
+                                double balance = 0, interest = 0;
+                                String number = String.valueOf("D" + (customerList.indexOf(customer)+1) * 10 + (customer.getAccounts().size()+1));//this simple algorithm generates the account number
+                                ArrayList<AccountTransaction> transactionList = new ArrayList<AccountTransaction>();
+
+                                CustomerDepositAccount deposit = new CustomerDepositAccount(interest, number, balance, transactionList);
+
+                                customer.getAccounts().add(deposit);
+                                JOptionPane.showMessageDialog(mainFrame, "Account number = " + number ,"Account created.",  JOptionPane.INFORMATION_MESSAGE);
+
+                                mainFrame.dispose();
+                                adminMenu(customerList);
+                            }
+
+                        }
+                    }
+                }
+            }
+        });
+        /////////////////////////////////////////////////////////////////
+        deleteCustomer.addActionListener(new ActionListener(  ) {
+            public void actionPerformed(ActionEvent ae) {
+                boolean found = true, loop = true;
+
+                if(customerList.isEmpty())
+                {
+                    JOptionPane.showMessageDialog(null, "There are currently no customers to display. ");
+                    mainFrame.dispose();
+                    menu.admin();
+                }
+                else
+                {
+                    {
+                        Object customerID = JOptionPane.showInputDialog(mainFrame, "Customer ID of Customer You Wish to Delete:");
+
+                        for (Customer aCustomer: customerList){
+
+                            if(aCustomer.getCustomerID().equals(customerID))
+                            {
+                                found = true;
+                                customer = aCustomer;
+                                loop = false;
+                            }
+                        }
+
+                        if(found == false)
+                        {
+                            int reply  = JOptionPane.showConfirmDialog(null, null, "User not found. Try again?", JOptionPane.YES_NO_OPTION);
+                            if (reply == JOptionPane.YES_OPTION) {
+                                loop = true;
+                            }
+                            else if(reply == JOptionPane.NO_OPTION)
+                            {
+                                mainFrame.dispose();
+                                loop = false;
+
+                                adminMenu(customerList);
+                            }
+                        }
+                        else
+                        {
+                            if(customer.getAccounts().size()>0)
+                            {
+                                JOptionPane.showMessageDialog(mainFrame, "This customer has accounts. \n You must delete a customer's accounts before deleting a customer " ,"Oops!",  JOptionPane.INFORMATION_MESSAGE);
+                            }
+                            else
+                            {
+                                customerList.remove(customer);
+                                JOptionPane.showMessageDialog(mainFrame, "Customer Deleted " ,"Success.",  JOptionPane.INFORMATION_MESSAGE);
+                            }
+                        }
+
+
+                    }}
+            }
+        });
+        //////////////////////////////////////////////////////////////////
+        deleteAccount.addActionListener(new ActionListener(  ) {
+            public void actionPerformed(ActionEvent ae) {
+                boolean found = true, loop = true;
+
+
+
+
+                {
+                    Object customerID = JOptionPane.showInputDialog(mainFrame, "Customer ID of Customer from which you wish to delete an account");
+
+                    for (Customer aCustomer: customerList){
+
+                        if(aCustomer.getCustomerID().equals(customerID))
+                        {
+                            found = true;
+                            customer = aCustomer;
+                            loop = false;
+                        }
+                    }
+
+                    if(found == false)
+                    {
+                        int reply  = JOptionPane.showConfirmDialog(null, null, "User not found. Try again?", JOptionPane.YES_NO_OPTION);
+                        if (reply == JOptionPane.YES_OPTION) {
+                            loop = true;
+                        }
+                        else if(reply == JOptionPane.NO_OPTION)
+                        {
+                            mainFrame.dispose();
+                            loop = false;
+
+                            adminMenu(customerList);
+                        }
+                    }
+                    else
+                    {
+                        //Here I would make the user select a an account to delete from a combo box. If the account had a balance of 0 then it would be deleted. (I do not have time to do this)
+                    }
+
+
+                }}
+
+        });
+        /////////////////////////////////////////////////////////////////
+        returnButton.addActionListener(new ActionListener(  ) {
+            public void actionPerformed(ActionEvent ae) {
+                mainFrame.dispose();
+                //menuStart();
+            }
+        });
+    }
+
+    public void create(ArrayList<Customer> customerList) {
+        boolean cont = verifyAdmin();
+        if (cont) {
+            // mainFrame.dispose();
+            adminMenu(customerList);
+        }
+    }
+
+    public boolean verifyAdmin() {
+        boolean pass = false, username = false;
+
+        while (!username) {
+            Object adminUsername = JOptionPane.showInputDialog(mainFrame, "Enter Administrator Username:");
+            if (!adminUsername.equals("admin"))//search admin list for admin with matching admin username
+            {
+                int reply = JOptionPane.showConfirmDialog(null, "Incorrect Username. Try again?", "Username Error", JOptionPane.ERROR_MESSAGE, JOptionPane.YES_NO_OPTION);
+                if (reply == JOptionPane.YES_OPTION) {
+
+                } else if (reply == JOptionPane.NO_OPTION) {
+                    mainFrame.dispose();
+                    secondaryFrame.dispose();
+                }
+            } else {
+                username = true;
+            }
+        }
+
+        while (!pass) {
+            Object adminPassword = JOptionPane.showInputDialog(mainFrame, "Enter Administrator Password;");
+            if (!adminPassword.equals("admin11"))//search admin list for admin with matching admin password
+            {
+                int reply = JOptionPane.showConfirmDialog(null, "Incorrect Password. Try again?", "Password Error", JOptionPane.ERROR_MESSAGE, JOptionPane.YES_NO_OPTION);
+                if (reply == JOptionPane.YES_OPTION) {
+
+                } else if (reply == JOptionPane.NO_OPTION) {
+                    pass = true;
+                    secondaryFrame.dispose();
+
+                }
+            } else {
+                pass = true;
+            }
+        }
+
+        if(username && pass) {
+            return true;
+        } return false;
+    }
+
+}
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Default ignored files\r\n/workspace.xml
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1583587256000)
+++ .idea/.gitignore	(date 1583769480024)
@@ -1,2 +1,3 @@
 # Default ignored files
-/workspace.xml
\ No newline at end of file
+/workspace.xml
+/shelf/
\ No newline at end of file
Index: src/NewUserPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.util.ArrayList;\r\n\r\npublic class NewUserPage {\r\n    private ArrayList<Customer> customerList = new ArrayList<Customer>();\r\n    JFrame mainFrame, secondaryFrame;\r\n    JLabel firstNameLabel, surnameLabel, pPPSLabel, dOBLabel;\r\n    JTextField firstNameTextField, surnameTextField, pPSTextField, dOBTextField;\r\n    JButton add;\r\n    String \tPPS,firstName,surname,DOB,CustomerID;\r\n    JPanel panel2;\r\n    Menu menu = new Menu();\r\n    private String password;\r\n\r\n\r\n\r\n    public void create() {\r\n        // mainFrame.dispose();\r\n        secondaryFrame = new JFrame(\"Create New Customer\");\r\n        secondaryFrame.setSize(400, 300);\r\n        secondaryFrame.setLocation(200, 200);\r\n        secondaryFrame.addWindowListener(new WindowAdapter() {\r\n            public void windowClosing(WindowEvent we) {\r\n                System.exit(0);\r\n            }\r\n        });\r\n        Container content = secondaryFrame.getContentPane();\r\n        content.setLayout(new BorderLayout());\r\n\r\n        firstNameLabel = new JLabel(\"First Name:\", SwingConstants.RIGHT);\r\n        surnameLabel = new JLabel(\"Surname:\", SwingConstants.RIGHT);\r\n        pPPSLabel = new JLabel(\"PPS Number:\", SwingConstants.RIGHT);\r\n        dOBLabel = new JLabel(\"Date of birth\", SwingConstants.RIGHT);\r\n        firstNameTextField = new JTextField(20);\r\n        surnameTextField = new JTextField(20);\r\n        pPSTextField = new JTextField(20);\r\n        dOBTextField = new JTextField(20);\r\n        JPanel panel = new JPanel(new GridLayout(6, 2));\r\n        panel.add(firstNameLabel);\r\n        panel.add(firstNameTextField);\r\n        panel.add(surnameLabel);\r\n        panel.add(surnameTextField);\r\n        panel.add(pPPSLabel);\r\n        panel.add(pPSTextField);\r\n        panel.add(dOBLabel);\r\n        panel.add(dOBTextField);\r\n\r\n        panel2 = new JPanel();\r\n        add = new JButton(\"Add\");\r\n\r\n        add.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n\r\n\r\n                PPS = pPSTextField.getText();\r\n                firstName = firstNameTextField.getText();\r\n                surname = surnameTextField.getText();\r\n                DOB = dOBTextField.getText();\r\n                password = \"\";\r\n\r\n                CustomerID = \"ID\" + PPS;\r\n\r\n\r\n                add.addActionListener(new ActionListener() {\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        secondaryFrame.dispose();\r\n                        boolean passwordCheck = false;\r\n                        while (!passwordCheck) {\r\n                            password = JOptionPane.showInputDialog(mainFrame, \"Enter 7 character Password;\");\r\n\r\n                            if (password.length() < 7) {\r\n                                JOptionPane.showMessageDialog(null, \"Password must be at least 7 characters long\", \"Password Error\", JOptionPane.OK_OPTION);\r\n                            } else {\r\n                                passwordCheck = true;\r\n                            }\r\n                        }\r\n\r\n\r\n                        ArrayList<CustomerAccount> accounts = new ArrayList<CustomerAccount>();\r\n                        Customer customer = new Customer(PPS, surname, firstName, DOB, CustomerID, password, accounts);\r\n\r\n                        customerList.add(customer);\r\n\r\n                        JOptionPane.showMessageDialog(mainFrame, \"CustomerID = \" + CustomerID + \"\\n Password = \" + password, \"Customer created.\", JOptionPane.INFORMATION_MESSAGE);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        JButton cancel = new JButton(\"Cancel\");\r\n        cancel.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                secondaryFrame.dispose();\r\n            }\r\n        });\r\n\r\n        panel2.add(add);\r\n        panel2.add(cancel);\r\n\r\n        content.add(panel, BorderLayout.CENTER);\r\n        content.add(panel2, BorderLayout.SOUTH);\r\n\r\n        secondaryFrame.setVisible(true);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/NewUserPage.java	(date 1583587256000)
+++ src/NewUserPage.java	(date 1583600927910)
@@ -7,7 +7,7 @@
 import java.util.ArrayList;
 
 public class NewUserPage {
-    private ArrayList<Customer> customerList = new ArrayList<Customer>();
+    //private ArrayList<Customer> customerList = new ArrayList<Customer>();
     JFrame mainFrame, secondaryFrame;
     JLabel firstNameLabel, surnameLabel, pPPSLabel, dOBLabel;
     JTextField firstNameTextField, surnameTextField, pPSTextField, dOBTextField;
@@ -15,11 +15,12 @@
     String 	PPS,firstName,surname,DOB,CustomerID;
     JPanel panel2;
     Menu menu = new Menu();
+    Customer customer;
     private String password;
 
 
 
-    public void create() {
+    public Customer create() {
         // mainFrame.dispose();
         secondaryFrame = new JFrame("Create New Customer");
         secondaryFrame.setSize(400, 300);
@@ -82,10 +83,7 @@
 
 
                         ArrayList<CustomerAccount> accounts = new ArrayList<CustomerAccount>();
-                        Customer customer = new Customer(PPS, surname, firstName, DOB, CustomerID, password, accounts);
-
-                        customerList.add(customer);
-
+                        customer = new Customer(PPS, surname, firstName, DOB, CustomerID, password, accounts);
                         JOptionPane.showMessageDialog(mainFrame, "CustomerID = " + CustomerID + "\n Password = " + password, "Customer created.", JOptionPane.INFORMATION_MESSAGE);
                     }
                 });
@@ -105,5 +103,6 @@
         content.add(panel2, BorderLayout.SOUTH);
 
         secondaryFrame.setVisible(true);
+        return customer;
     }
 }
Index: src/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList; \r\n\r\npublic class Customer {\r\n\r\n\tString PPS =\"\";\r\n\tString surname = \"\";\r\n\tString firstName = \"\";\r\n\tString DOB =\"\";\r\n\tString customerID = \"\";\r\n\tString password = \"\";\r\n\t\r\n\tArrayList<CustomerAccount> accounts = new ArrayList<CustomerAccount> ();\r\n\r\n\t//Blank constructor\r\n\tpublic Customer()\r\n\t{\r\n\t\tthis.PPS = \"\";\r\n\t\tthis.surname = \"\";\r\n\t\tthis.firstName = \"\";\r\n\t\tthis.DOB = \"\";\r\n\t\tthis.customerID = \"\";\r\n\t\tthis.password = \"\";\r\n\t\tthis.accounts = null;\r\n\t}\r\n\t\r\n\t//Constructor with details\r\n\tpublic Customer(String PPS, String surname, String firstName, String DOB, String customerID, String password, ArrayList<CustomerAccount> accounts)\r\n\t{\r\n\t\tthis.PPS = PPS;\r\n\t\tthis.surname = surname;\r\n\t\tthis.firstName = firstName;\r\n\t\tthis.DOB = DOB;\r\n\t\tthis.customerID = customerID;\r\n\t\tthis.password = password;;\r\n\t\tthis.accounts = accounts;\r\n\t}\r\n\t\r\n\t//Accessor methods\r\n\tpublic String getPPS()\r\n\t{\r\n\t\treturn this.PPS;\r\n\t}\r\n\t\r\n\tpublic String getSurname()\r\n\t{\r\n\t\treturn this.surname;\r\n\t}\r\n\t\r\n\tpublic String getFirstName()\r\n\t{\r\n\t\treturn this.firstName;\r\n\t}\r\n\t\r\n\tpublic String getDOB()\r\n\t{\r\n\t\treturn this.DOB;\r\n\t}\r\n\t\r\n\tpublic String getCustomerID()\r\n\t{\r\n\t\treturn this.customerID;\r\n\t}\r\n\t\r\n\tpublic String getPassword()\r\n\t{\r\n\t\treturn this.password;\r\n\t}\r\n\t\r\n\tpublic ArrayList<CustomerAccount> getAccounts()\r\n\t{\r\n\t\treturn this.accounts;\r\n\t}\r\n\t\r\n\t//mutator methods\r\n\tpublic void setPPS(String PPS)\r\n\t{\r\n\t\tthis.PPS = PPS;\r\n\t}\r\n\t\r\n\tpublic void setSurname(String surname)\r\n\t{\r\n\t\tthis.surname = surname;\r\n\t}\r\n\t\r\n\tpublic void setFirstName(String firstName)\r\n\t{\r\n\t\tthis.firstName = firstName;\r\n\t}\r\n\t\r\n\tpublic void setDOB(String DOB)\r\n\t{\r\n\t\tthis.DOB = DOB;\r\n\t}\r\n\t\r\n\r\n\r\n\t\r\n\tpublic void setCustomerID(String customerID)\r\n\t{\r\n\t\tthis.customerID = customerID;\r\n\t}\r\n\t\r\n\tpublic void setPassword(String password)\r\n\t{\r\n\t\tthis.password = password;\r\n\t}\r\n\t\r\n\tpublic void setAccounts(ArrayList<CustomerAccount> accounts)\r\n\t{\r\n\t\tthis.accounts = accounts;\r\n\t}\r\n\t\r\n\tpublic String toString()\r\n\t{\r\n\t\treturn \"PPS number = \" + this.PPS + \"\\n\"\r\n\t\t\t\t+ \"Surname = \" + this.surname + \"\\n\"\r\n\t\t\t\t+ \"First Name = \" + this.firstName + \"\\n\"\r\n\t\t\t\t+ \"Date of Birth = \" + this.DOB + \"\\n\"\r\n\t\t\t\t+ \"Customer ID = \" + this.customerID;\r\n\t\t\t\r\n\t}\r\n\t\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Customer.java	(date 1583587256000)
+++ src/Customer.java	(date 1583600792924)
@@ -10,7 +10,6 @@
 	String password = "";
 	
 	ArrayList<CustomerAccount> accounts = new ArrayList<CustomerAccount> ();
-
 	//Blank constructor
 	public Customer()
 	{
